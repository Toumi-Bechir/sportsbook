{"ast":null,"code":"import _objectSpread from\"/home/sami/aaa/sportsbook/assets/react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useRef,useCallback}from'react';import{useParams,useNavigate}from'react-router-dom';import{Socket}from'phoenix';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function MatchDetailPage(){var _selectedMatch$data,_selectedMatch$data$t,_selectedMatch$data2,_selectedMatch$data2$,_selectedMatch$data3;const{sport:selectedSport,matchId}=useParams();const navigate=useNavigate();// State management\nconst[sports,setSports]=useState([]);const[allMatches,setAllMatches]=useState({});const[expandedSports,setExpandedSports]=useState(new Set([selectedSport]));// Ensure selected sport is always expanded\nuseEffect(()=>{if(selectedSport&&!expandedSports.has(selectedSport)){setExpandedSports(new Set([selectedSport]));}},[selectedSport,expandedSports]);const[selectedMatch,setSelectedMatch]=useState(null);const[fullMatchData,setFullMatchData]=useState(null);const[activeTab,setActiveTab]=useState('stats');// Dictionaries\nconst[marketDictionaries,setMarketDictionaries]=useState({});const[matchEventsDictionaries,setMatchEventsDictionaries]=useState({});// Socket management\nconst[socket,setSocket]=useState(null);const[connectionStatus,setConnectionStatus]=useState('disconnected');const matchChannelsRef=useRef(new Map());const detailChannelRef=useRef(null);const subscribedMatches=useRef(new Set());// Initialize socket\nuseEffect(()=>{const newSocket=new Socket('/socket',{params:{userToken:'anonymous'}});newSocket.onOpen(()=>{setConnectionStatus('connected');});newSocket.onError(()=>{setConnectionStatus('error');});newSocket.onClose(()=>{setConnectionStatus('disconnected');});newSocket.connect();setSocket(newSocket);return()=>{if(newSocket){newSocket.disconnect();}};},[]);// Fetch sports list\nuseEffect(()=>{fetch('/api/sports').then(response=>response.json()).then(data=>{setSports(data.sports||[]);}).catch(error=>{console.error('Error fetching sports:',error);});},[]);// Fetch dictionaries for expanded sports\nuseEffect(()=>{expandedSports.forEach(sport=>{if(!marketDictionaries[sport]||!matchEventsDictionaries[sport]){fetchDictionaries(sport);}});},[expandedSports]);// Fetch matches for expanded sports\nuseEffect(()=>{expandedSports.forEach(sport=>{if(!allMatches[sport]){fetchMatches(sport);}});},[expandedSports]);// Subscribe to matches when sports are expanded and matches are available\nuseEffect(()=>{if(!socket)return;expandedSports.forEach(sport=>{if(allMatches[sport]){allMatches[sport].forEach(league=>{league.matches.forEach(match=>{const channelKey=\"\".concat(sport,\":\").concat(match.id);if(!subscribedMatches.current.has(channelKey)){subscribeToMatch(sport,match.id);}});});}});// Clean up subscriptions for sports that are no longer expanded\nconst keysToRemove=[];subscribedMatches.current.forEach(key=>{const[sport]=key.split(':');if(!expandedSports.has(sport)){const channel=matchChannelsRef.current.get(key);if(channel){channel.leave();matchChannelsRef.current.delete(key);}keysToRemove.push(key);}});keysToRemove.forEach(key=>{subscribedMatches.current.delete(key);});},[socket,expandedSports]);// Clean up subscriptions when component unmounts\nuseEffect(()=>{return()=>{matchChannelsRef.current.forEach(channel=>{channel.leave();});matchChannelsRef.current.clear();subscribedMatches.current.clear();};},[]);// Subscribe to detailed match data for selected match\nuseEffect(()=>{if(!socket||!matchId)return;if(detailChannelRef.current){detailChannelRef.current.leave();}const detailChannel=socket.channel(\"match_details:\".concat(selectedSport,\":\").concat(matchId),{});detailChannel.join().receive('ok',()=>{console.log(\"\\u2705 Subscribed to detailed updates for match \".concat(matchId));}).receive('error',resp=>{console.log(\"\\u274C Failed to subscribe to detailed updates:\",resp);});detailChannel.on('full_match_data',payload=>{setFullMatchData(payload.data);});detailChannelRef.current=detailChannel;return()=>{if(detailChannel){detailChannel.leave();}};},[socket,selectedSport,matchId]);// Load initial selected match\nuseEffect(()=>{if(allMatches[selectedSport]&&matchId){const match=findMatchById(selectedSport,matchId);if(match){setSelectedMatch(match);}}},[allMatches,selectedSport,matchId]);// Update selected match when navigating to different match\nuseEffect(()=>{if(allMatches[selectedSport]&&matchId){const match=findMatchById(selectedSport,matchId);if(match&&(!selectedMatch||selectedMatch.id!==matchId)){setSelectedMatch(match);}}},[selectedSport,matchId]);const fetchDictionaries=async sport=>{try{const response=await fetch(\"/api/markets/\".concat(sport));const data=await response.json();if(data.markets){const marketMap={};data.markets.forEach(market=>{marketMap[market.id]=market.name;});setMarketDictionaries(prev=>_objectSpread(_objectSpread({},prev),{},{[sport]:marketMap}));}if(data.match_events){const eventsMap={};data.match_events.forEach(event=>{eventsMap[event.code]=event.name;});setMatchEventsDictionaries(prev=>_objectSpread(_objectSpread({},prev),{},{[sport]:eventsMap}));}}catch(error){console.error('Error fetching dictionaries:',error);}};const fetchMatches=async sport=>{try{const response=await fetch(\"/api/matches/\".concat(sport));const data=await response.json();setAllMatches(prev=>_objectSpread(_objectSpread({},prev),{},{[sport]:data.matches||[]}));}catch(error){console.error('Error fetching matches:',error);setAllMatches(prev=>_objectSpread(_objectSpread({},prev),{},{[sport]:[]}));}};const subscribeToMatch=(sport,matchId)=>{const channelKey=\"\".concat(sport,\":\").concat(matchId);if(subscribedMatches.current.has(channelKey)){return;}const channelTopic=\"match:\".concat(sport,\":\").concat(matchId);const matchChannel=socket.channel(channelTopic,{});matchChannel.join().receive('ok',()=>{console.log(\"\\u2705 Subscribed to \".concat(sport,\" match \").concat(matchId));subscribedMatches.current.add(channelKey);}).receive('error',resp=>{console.log(\"\\u274C Failed to subscribe to \".concat(sport,\" match \").concat(matchId,\":\"),resp);});matchChannel.on('match_update',payload=>{updateSpecificMatch(sport,matchId,payload.data);});matchChannelsRef.current.set(channelKey,matchChannel);};const updateSpecificMatch=(sport,matchId,newData)=>{setAllMatches(prevMatches=>{if(!prevMatches[sport])return prevMatches;return _objectSpread(_objectSpread({},prevMatches),{},{[sport]:prevMatches[sport].map(league=>{const matchIndex=league.matches.findIndex(m=>m.id===matchId);if(matchIndex===-1)return league;const updatedMatches=[...league.matches];updatedMatches[matchIndex]=_objectSpread(_objectSpread({},updatedMatches[matchIndex]),{},{data:newData});return _objectSpread(_objectSpread({},league),{},{matches:updatedMatches});})});});// Update selected match if it's the one being updated\nif(selectedMatch&&selectedMatch.id===matchId&&sport===selectedSport){setSelectedMatch(prevMatch=>_objectSpread(_objectSpread({},prevMatch),{},{data:newData}));}};const findMatchById=(sport,matchId)=>{if(!allMatches[sport])return null;for(const league of allMatches[sport]){const match=league.matches.find(m=>m.id===matchId);if(match)return match;}return null;};const handleSportToggle=sport=>{setExpandedSports(prev=>{const newSet=new Set();if(!prev.has(sport)){newSet.add(sport);}return newSet;});};const handleMatchSelect=(sport,matchId)=>{navigate(\"/match/\".concat(sport,\"/\").concat(matchId));};const formatTime=seconds=>{if(!seconds)return'00:00';const minutes=Math.floor(seconds/60);const remainingSeconds=seconds%60;return\"\".concat(minutes,\":\").concat(remainingSeconds.toString().padStart(2,'0'));};const formatSportName=sport=>{const sportNames={soccer:'⚽ Soccer',basket:'🏀 Basketball',tennis:'🎾 Tennis',baseball:'⚾ Baseball',amfootball:'🏈 American Football',hockey:'🏒 Hockey',volleyball:'🏐 Volleyball'};return sportNames[sport]||sport;};const getMarketName=marketId=>{var _marketDictionaries$s;return((_marketDictionaries$s=marketDictionaries[selectedSport])===null||_marketDictionaries$s===void 0?void 0:_marketDictionaries$s[marketId])||\"Market \".concat(marketId);};const getScore=matchData=>{var _matchData$t,_matchData$t2;if(!matchData)return'0-0';switch(selectedSport){case'soccer':case'basket':case'amfootball':case'hockey':return\"\".concat(((_matchData$t=matchData.t1)===null||_matchData$t===void 0?void 0:_matchData$t.score)||0,\"-\").concat(((_matchData$t2=matchData.t2)===null||_matchData$t2===void 0?void 0:_matchData$t2.score)||0);default:return'0-0';}};if(!selectedMatch){return/*#__PURE__*/_jsx(\"div\",{className:\"match-detail-page\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"loading-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"loading-spinner\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Loading match details...\"})]})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"match-detail-page\",children:[/*#__PURE__*/_jsxs(\"aside\",{className:\"sports-sidebar\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"sidebar-header\",children:/*#__PURE__*/_jsx(\"button\",{className:\"back-button\",onClick:()=>navigate('/'),children:\"\\u2190 Back to Home\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"sports-menu\",children:sports.map(sport=>/*#__PURE__*/_jsxs(\"div\",{className:\"sport-section\",children:[/*#__PURE__*/_jsxs(\"button\",{className:\"sport-toggle \".concat(expandedSports.has(sport.name)?'expanded':''),onClick:()=>handleSportToggle(sport.name),children:[/*#__PURE__*/_jsx(\"span\",{className:\"sport-name\",children:formatSportName(sport.name)}),/*#__PURE__*/_jsxs(\"span\",{className:\"match-count\",children:[\"(\",sport.match_count,\")\"]}),/*#__PURE__*/_jsx(\"span\",{className:\"toggle-icon\",children:expandedSports.has(sport.name)?'−':'+'})]}),expandedSports.has(sport.name)&&allMatches[sport.name]&&/*#__PURE__*/_jsx(\"div\",{className:\"matches-list\",children:allMatches[sport.name].map((league,leagueIndex)=>/*#__PURE__*/_jsxs(\"div\",{className:\"league-group\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"league-name\",children:league.league}),league.matches.map(match=>{var _match$data,_match$data2,_match$data2$t,_match$data3,_match$data3$t,_match$data4,_match$data4$t,_match$data5,_match$data5$t;return/*#__PURE__*/_jsxs(\"button\",{className:\"match-item \".concat(match.id===matchId?'selected':''),onClick:()=>handleMatchSelect(sport.name,match.id),children:[/*#__PURE__*/_jsx(\"div\",{className:\"match-time\",children:formatTime((_match$data=match.data)===null||_match$data===void 0?void 0:_match$data.time)}),/*#__PURE__*/_jsxs(\"div\",{className:\"match-teams\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"team\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"team-name\",children:((_match$data2=match.data)===null||_match$data2===void 0?void 0:(_match$data2$t=_match$data2.t1)===null||_match$data2$t===void 0?void 0:_match$data2$t.name)||'Team 1'}),/*#__PURE__*/_jsx(\"span\",{className:\"team-score\",children:((_match$data3=match.data)===null||_match$data3===void 0?void 0:(_match$data3$t=_match$data3.t1)===null||_match$data3$t===void 0?void 0:_match$data3$t.score)||0})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"team\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"team-name\",children:((_match$data4=match.data)===null||_match$data4===void 0?void 0:(_match$data4$t=_match$data4.t2)===null||_match$data4$t===void 0?void 0:_match$data4$t.name)||'Team 2'}),/*#__PURE__*/_jsx(\"span\",{className:\"team-score\",children:((_match$data5=match.data)===null||_match$data5===void 0?void 0:(_match$data5$t=_match$data5.t2)===null||_match$data5$t===void 0?void 0:_match$data5$t.score)||0})]})]})]},match.id);})]},leagueIndex))})]},sport.name))})]}),/*#__PURE__*/_jsxs(\"main\",{className:\"main-content\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"match-header sticky\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"match-info\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"teams\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"team-name\",children:((_selectedMatch$data=selectedMatch.data)===null||_selectedMatch$data===void 0?void 0:(_selectedMatch$data$t=_selectedMatch$data.t1)===null||_selectedMatch$data$t===void 0?void 0:_selectedMatch$data$t.name)||'Team 1'}),/*#__PURE__*/_jsx(\"span\",{className:\"vs\",children:\"vs\"}),/*#__PURE__*/_jsx(\"span\",{className:\"team-name\",children:((_selectedMatch$data2=selectedMatch.data)===null||_selectedMatch$data2===void 0?void 0:(_selectedMatch$data2$=_selectedMatch$data2.t2)===null||_selectedMatch$data2$===void 0?void 0:_selectedMatch$data2$.name)||'Team 2'})]}),/*#__PURE__*/_jsx(\"div\",{className:\"score\",children:getScore(selectedMatch.data)}),/*#__PURE__*/_jsx(\"div\",{className:\"match-time\",children:formatTime((_selectedMatch$data3=selectedMatch.data)===null||_selectedMatch$data3===void 0?void 0:_selectedMatch$data3.time)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"connection-status\",style:{color:connectionStatus==='connected'?'#10B981':'#EF4444'},children:[\"\\u25CF \",connectionStatus]})]}),/*#__PURE__*/_jsx(\"section\",{className:\"markets-section\",children:/*#__PURE__*/_jsx(\"div\",{className:\"markets-container\",children:fullMatchData!==null&&fullMatchData!==void 0&&fullMatchData.odds&&Array.isArray(fullMatchData.odds)?/*#__PURE__*/_jsx(\"div\",{className:\"markets-grid\",children:fullMatchData.odds.map((market,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"market-card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"market-header\",children:/*#__PURE__*/_jsxs(\"h5\",{className:\"market-name\",children:[getMarketName(market.id),market.ha&&/*#__PURE__*/_jsxs(\"span\",{className:\"handicap\",children:[\"(\",market.ha,\")\"]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"odds-list\",children:market.o&&Array.isArray(market.o)?market.o.map((odd,oddIndex)=>/*#__PURE__*/_jsxs(\"button\",{className:\"odd-button\",disabled:odd.bl===1,children:[/*#__PURE__*/_jsx(\"span\",{className:\"odd-name\",children:odd.n}),/*#__PURE__*/_jsx(\"span\",{className:\"odd-value\",children:odd.v})]},oddIndex)):/*#__PURE__*/_jsx(\"div\",{className:\"no-odds\",children:\"No odds available\"})})]},index))}):/*#__PURE__*/_jsx(\"div\",{className:\"loading-markets\",children:\"Loading markets...\"})})})]}),/*#__PURE__*/_jsxs(\"aside\",{className:\"match-tracker\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"tracker-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Match Tracker\"}),/*#__PURE__*/_jsx(\"div\",{className:\"tracker-placeholder\",children:/*#__PURE__*/_jsx(\"p\",{children:\"Match tracker will be implemented here\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stats-section\",children:[/*#__PURE__*/_jsxs(\"nav\",{className:\"stats-nav\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"nav-tab \".concat(activeTab==='stats'?'active':''),onClick:()=>setActiveTab('stats'),children:\"Stats\"}),/*#__PURE__*/_jsx(\"button\",{className:\"nav-tab \".concat(activeTab==='timeline'?'active':''),onClick:()=>setActiveTab('timeline'),children:\"Timeline\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"stats-content\",children:activeTab==='stats'?/*#__PURE__*/_jsx(\"div\",{className:\"stats-data\",children:/*#__PURE__*/_jsx(\"p\",{children:\"Match statistics will be displayed here\"})}):/*#__PURE__*/_jsx(\"div\",{className:\"timeline-data\",children:/*#__PURE__*/_jsx(\"p\",{children:\"Match timeline will be displayed here\"})})})]})]})]});}export default MatchDetailPage;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}