{"ast":null,"code":"import _objectSpread from\"/home/sami/aaa/sportsbook/assets/react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useRef}from'react';import{Socket}from'phoenix';import SportFilter from'./components/SportFilter';import MatchesList from'./components/MatchesList';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[selectedSport,setSelectedSport]=useState('soccer');const[sports,setSports]=useState([]);const[matches,setMatches]=useState([]);const[socket,setSocket]=useState(null);const[connectionStatus,setConnectionStatus]=useState('disconnected');const[lastUpdate,setLastUpdate]=useState(new Date());// Keep track of active match subscriptions\nconst matchChannelsRef=useRef(new Map());// Initialize socket connection\nuseEffect(()=>{const newSocket=new Socket('/socket',{params:{userToken:'anonymous'}});newSocket.onOpen(()=>{console.log('Socket connected');setConnectionStatus('connected');});newSocket.onError(()=>{console.log('Socket error');setConnectionStatus('error');});newSocket.onClose(()=>{console.log('Socket closed');setConnectionStatus('disconnected');});newSocket.connect();setSocket(newSocket);// Cleanup on unmount\nreturn()=>{if(newSocket){newSocket.disconnect();}};},[]);// Fetch initial sports list\nuseEffect(()=>{fetch('/api/sports').then(response=>response.json()).then(data=>{setSports(data.sports||[]);}).catch(error=>{console.error('Error fetching sports:',error);});},[]);// Fetch initial matches when sport changes\nuseEffect(()=>{if(!selectedSport)return;console.log(\"Fetching initial matches for \".concat(selectedSport));fetch(\"/api/matches/\".concat(selectedSport)).then(response=>response.json()).then(data=>{console.log(\"Received initial matches for \".concat(selectedSport,\":\"),data);setMatches(data.matches||[]);setLastUpdate(new Date());}).catch(error=>{console.error('Error fetching matches:',error);setMatches([]);});},[selectedSport]);// Subscribe to individual matches when matches change\nuseEffect(()=>{if(!socket||!selectedSport||matches.length===0)return;console.log(\"Setting up match subscriptions for \".concat(selectedSport));// Clean up existing subscriptions\nmatchChannelsRef.current.forEach((channel,matchId)=>{console.log(\"Leaving subscription for match \".concat(matchId));channel.leave();});matchChannelsRef.current.clear();// Subscribe to each match\nmatches.forEach(league=>{league.matches.forEach(match=>{subscribeToMatch(match.id);});});// Cleanup function\nreturn()=>{matchChannelsRef.current.forEach((channel,matchId)=>{console.log(\"Cleaning up subscription for match \".concat(matchId));channel.leave();});matchChannelsRef.current.clear();};},[socket,selectedSport,matches.length]);// Only re-run when matches count changes\nconst subscribeToMatch=matchId=>{if(matchChannelsRef.current.has(matchId)){return;// Already subscribed\n}const channelTopic=\"match:\".concat(selectedSport,\":\").concat(matchId);console.log(\"Subscribing to \".concat(channelTopic));const matchChannel=socket.channel(channelTopic,{});matchChannel.join().receive('ok',()=>{console.log(\"\\u2705 Successfully subscribed to match \".concat(matchId));}).receive('error',resp=>{console.log(\"\\u274C Failed to subscribe to match \".concat(matchId,\":\"),resp);});// Handle individual match updates\nmatchChannel.on('match_update',payload=>{console.log(\"\\uD83D\\uDD04 Match \".concat(matchId,\" updated:\"),payload);updateSpecificMatch(matchId,payload.data);});// Store the channel reference\nmatchChannelsRef.current.set(matchId,matchChannel);};// Efficient function to update only a specific match\nconst updateSpecificMatch=(matchId,newData)=>{setMatches(prevMatches=>{return prevMatches.map(league=>{const matchIndex=league.matches.findIndex(m=>m.id===matchId);if(matchIndex===-1)return league;// Match not in this league\n// Create new matches array with updated match\nconst updatedMatches=[...league.matches];updatedMatches[matchIndex]=_objectSpread(_objectSpread({},updatedMatches[matchIndex]),{},{data:newData});return _objectSpread(_objectSpread({},league),{},{matches:updatedMatches});});});setLastUpdate(new Date());};const formatTime=seconds=>{if(!seconds)return'00:00';const minutes=Math.floor(seconds/60);const remainingSeconds=seconds%60;return\"\".concat(minutes,\":\").concat(remainingSeconds.toString().padStart(2,'0'));};const getConnectionStatusColor=()=>{switch(connectionStatus){case'connected':return'#10B981';case'error':return'#EF4444';default:return'#6B7280';}};return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsx(\"header\",{className:\"app-header\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"header-content\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\uD83C\\uDFC6 Sportsbook Live\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"header-info\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"connection-status\",style:{color:getConnectionStatusColor()},children:[\"\\u25CF \",connectionStatus]}),/*#__PURE__*/_jsxs(\"div\",{className:\"subscriptions-count\",children:[\"\\uD83D\\uDCE1 \",matchChannelsRef.current.size,\" active subscriptions\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"last-update\",children:[\"Last update: \",lastUpdate.toLocaleTimeString()]})]})]})}),/*#__PURE__*/_jsx(\"main\",{className:\"main-content\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(SportFilter,{sports:sports,selectedSport:selectedSport,onSportChange:setSelectedSport}),/*#__PURE__*/_jsx(MatchesList,{sport:selectedSport,matches:matches,formatTime:formatTime})]})})]});}export default App;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}